## Test model fits against one another

import numpy as np

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
from data_paths import SCRATCH_DIR

Import('env')
localenv = env.Clone()

# Set up state
base = {'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

SPARSITY_RATIO = 1.0

models = [
    # {'simulation': 'survival', 'motif_lens': [3,5], 'positions_mutating': "1:2"},
    {'simulation': 'shmulate', 'motif_lens': [3,5], 'positions_mutating': "1:2", "seqs": 4000, "subjects": 8},
]

nest.add(
    'model',
    models,
    label_func=lambda c: "final_%s_m%s_s%d" % (c["simulation"], "-".join(map(str, c["motif_lens"])), c["seqs"]),
)

nest.add(
    'replicate',
    range(3,4),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c["replicate"]],
    create_dir=False)

nest.add(
    'target',
    [True]
)

# simulate data
@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    shmulate_flag = "" if c["model"]["simulation"] == 'survival' else "--use-shmulate"
    per_target_flag = "--per-target-model" if c["target"] else ""
    cmd = ['python generate_theta.py',
            '--seed',
            c['seed'],
            '--motif-lens',
            ",".join([str(m) for m in c['model']['motif_lens']]),
            '--positions-mutating',
            c["model"]["positions_mutating"],
            '--nonzero-ratio',
            SPARSITY_RATIO,
            per_target_flag,
            shmulate_flag,
            '--output-model ${TARGETS[0]}',
    ]
    return env.Command(
        [join(outdir, 'true_model.pkl')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def simulate(env, outdir, c):
    shmulate_flag = "" if c["model"]["simulation"] == 'survival' else "--use-shmulate"

    cmd = ['python simulate_shm_star_tree.py',
            '--seed',
            c['seed'],
            '--agg-motif-len',
            max(c['model']['motif_lens']),
            '--input-model ${SOURCES[0]}',
            '--n-subjects',
            c['model']['subjects'],
            '--tot-mutated',
            c['model']['seqs'],
            '--min-percent-mutated',
            0.01,
            '--max-percent-mutated',
            0.05,
            '--output-mutated ${TARGETS[0]}',
            '--output-naive ${TARGETS[1]}',
            shmulate_flag,
            '--use-partis',
        ]

    return env.Command(
        [join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_survival(env, outdir, c):
    motif_lens = c['model']['motif_lens']
    left_flanks = c['model']['positions_mutating']
    per_target_flag = "--per-target-model" if c["target"] else ""
    penalty_params = ",".join(map(str, np.power(10, np.arange(-4.0, -8.0, step=-.5)).tolist()))

    cmd = ['python fit_samm.py',
        '--input-naive ${SOURCES[1]}',
        '--input-mutated ${SOURCES[0]}',
        '--seed',
        c['seed'],
        '--motif-lens',
        ",".join([str(m) for m in motif_lens]),
        '--positions-mutating',
        left_flanks,
        '--penalty-params',
        penalty_params,
        '--sample-regime',
        1, # use all the sequences since we generate from star tree (and we dont rename germlines)
        '--num-cpu-threads',
        int(6 * (c["model"]["seqs"]/3000)),
        '--num-jobs',
        int(10 * (c["model"]["seqs"]/3000)),
        '--burn-in',
        16,
        '--num-e-samples',
        4,
        '--sampling-rate',
        4,
        '--em-max-iters',
        10,
        '--validation-col germline_family',
        '--num-val-burnin',
        16,
        '--num-val-samples',
        16,
        '--scratch-directory',
        SCRATCH_DIR,
        '--tuning-sample-ratio',
        0.2,
        '--out-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}',
        per_target_flag,
        '--omit-hessian',
    ]

    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['simulate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_shazam(env, outdir, c):

    cmd = ['python fit_shmulate_model.py',
           '--input-file',
           '${SOURCES[0]}',
           '--input-genes',
           '${SOURCES[1]}',
           '--model-pkl ${TARGETS[0]}',
           '--log-file ${TARGETS[1]}']

    return env.Command(
        [join(outdir, 'fitted_shazam.pkl'), join(outdir, 'log_shazam.txt')],
        c['simulate'],
        ' '.join(map(str, cmd)))

# Compare models using compare_simulated_shazam_vs_samm.py
