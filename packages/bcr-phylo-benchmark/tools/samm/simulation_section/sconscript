# Test model fits against one another - data generated from a survival model

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

from data_paths import SCRATCH_DIR

Import('env')
localenv = env.Clone()

SPARSITIES = [0.25, 0.5, 1.0]
EFFECT_SIZES = [0.5, 1.0, 2.0]
SIMULATION_SIZES = [100, 200, 400]

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

# Nest for simulation methods
models = [
    #{'motif_lens': [3], 'positions_mutating': "1", 'per_target': False},
    {'motif_lens': [3], 'positions_mutating': "1", 'per_target': True},
    #{'motif_lens': [2,3], 'positions_mutating': "0,1:1", 'per_target': False},
]

nest.add(
    'model',
    models,
    label_func=lambda c: "%s_target%s" % ("_".join([str(m) for m in c["motif_lens"]]), c["per_target"]),
)

nest.add(
    'nonzero_ratio',
    SPARSITIES,
    label_func=lambda c: "nonzero%d" % int(c * 100),
)

nest.add(
    'effect_size',
    EFFECT_SIZES,
    label_func=lambda c: "effect_size_%d" % int(c * 100),
)


@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    if c['effect_size'] != EFFECT_SIZES[int(len(EFFECT_SIZES)/2)] and c['nonzero_ratio'] != SPARSITIES[int(len(SPARSITIES)/2)]:
        return

    per_target_model_str = ""
    if c["model"]["per_target"]:
        per_target_model_str = "--per-target-model"

    cmd = ['python generate_theta.py',
           '--seed',
           0,
           '--motif-lens',
           ",".join([str(m) for m in c['model']['motif_lens']]),
           '--positions-mutating',
           c["model"]["positions_mutating"],
           '--effect-size',
           c['effect_size'],
           '--nonzero-ratio',
           c['nonzero_ratio'],
           per_target_model_str,
           '--output-model ${TARGETS[0]}']
    return env.Command(
        [join(outdir, 'true_model.pkl')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'simulation_size',
    SIMULATION_SIZES,
    label_func=lambda c: "samples%d" % c,
)

# Nest for replicates
nest.add(
    'replicate',
    range(2, 5),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# Targets for simulating fake data
@nest.add_target_with_env(localenv)
def simulate(env, outdir, c):
    c1 = c['simulation_size'] == SIMULATION_SIZES[int(len(SIMULATION_SIZES)/2)]
    c2 = c['nonzero_ratio'] == SPARSITIES[int(len(SPARSITIES)/2)]
    c3 = c['effect_size'] == EFFECT_SIZES[int(len(EFFECT_SIZES)/2)]
    if np.sum([c1, c2, c3]) < 2:
        return
    cmd = ['python simulate_shm_star_tree.py',
           '--seed',
           c['seed'],
           '--agg-motif-len',
           max(c['model']['motif_lens']),
           '--input-model ${SOURCES[0]}',
           '--use-partis',
           '--n-subjects',
           1,
           '--tot-mutated',
           c["simulation_size"],
           '--min-percent-mutated',
           0.01,
           '--max-percent-mutated',
           0.05,
           '--output-mutated ${TARGETS[0]}',
           '--output-naive ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        c['generate'],
        ' '.join(map(str, cmd)))

nest.add(
    'method',
    [
        "samm",
    ])

# Nest for model fitting
@nest.add_target_with_env(localenv)
def fit_context_model(env, outdir, c):
    c1 = c['simulation_size'] == SIMULATION_SIZES[int(len(SIMULATION_SIZES)/2)]
    c2 = c['nonzero_ratio'] == SPARSITIES[int(len(SPARSITIES)/2)]
    c3 = c['effect_size'] == EFFECT_SIZES[int(len(EFFECT_SIZES)/2)]
    if np.sum([c1, c2, c3]) < 2:
        return
    cmd = []
    penalty_params = np.power(10, np.arange(-1.0, -6, step=-0.5)).tolist()
    per_target_model_str = ""
    if c["model"]["per_target"]:
        per_target_model_str = "--per-target-model"

    cmd = ['python fit_samm.py',
           '--seed',
           c['seed'],
           '--motif-lens',
           ",".join([str(m) for m in c['model']['motif_lens']]),
           '--positions-mutating',
           c["model"]["positions_mutating"],
           '--penalty-params',
           ",".join(map(str, penalty_params)),
           '--num-cpu-threads',
           min(int(c['simulation_size']/40), 10),
           '--num-jobs',
           min(int(c['simulation_size']/40), 10),
           '--burn-in',
           16,
           '--num-e-samples',
           4,
           '--sampling-rate',
           8,
           '--em-max-iters',
           10,
           '--num-val-burnin',
           16,
           '--num-val-samples',
           16,
           per_target_model_str,
           '--scratch-directory',
           SCRATCH_DIR,
           '--tuning-sample-ratio',
           0.2,
           '--validation-col germline_family',
           '--input-mutated ${SOURCES[0]}',
           '--input-naive ${SOURCES[1]}',
           '--out-file ${TARGETS[0]}',
           '--log-file ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['simulate'],
        ' '.join(map(str, cmd)))
