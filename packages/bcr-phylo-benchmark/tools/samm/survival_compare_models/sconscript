## Test model fits against one another - data generated from a survival model

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

from data_paths import SCRATCH_DIR

Import('env')
localenv = env.Clone()

# Set up state
base = {'nreps': localenv['NREPS'],
        'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

# Nest for simulation methods
sim_models = [
    # 'is_per_target',
    'is_single',
]

nest.add(
    'per_target_model',
    sim_models)

nest.add(
    'simulation_options',
    lambda c: [
        "" if c["per_target_model"] == "is_single" else "--per-target-model"
    ],
    create_dir=False)

sim_size_dict = [
    # about 10% of sequence gets mutated
    # {'size': 'mini', 'n_taxa': 2, 'n_germlines': 2, 'random_gene_len': 50, 'min_censor_time': 2.0},
    #{'size': 'big', 'n_taxa': 1, 'n_germlines': 1000, 'random_gene_len': 300, 'min_censor_time': 1, 'shuffle', False},
    #{'size': 'big_diff', 'n_taxa': 1, 'n_germlines': 1000, 'random_gene_len': 300, 'min_censor_time': 0.25, 'shuffle': False},
    #{'size': 'big_diff_shuffle', 'n_taxa': 1, 'n_germlines': 1000, 'random_gene_len': 300, 'min_censor_time': 0.25, 'shuffle': True},
    {'size': 'big_diff_shuffle_longer', 'n_taxa': 1, 'n_germlines': 1000, 'random_gene_len': 300, 'min_censor_time': 0.75, 'shuffle': True},
]

nest.add(
    'simulation_size',
    sim_size_dict,
    label_func=lambda c: c['size'])

# Nest for replicates
nest.add(
    'replicate',
    range(localenv['NREPS']),
    label_func='{:02d}'.format)

# Set the seed to be the replicate number.
nest.add(
    'seed',
    lambda c: [c['replicate']],
    create_dir=False)

# Targets for simulating fake data
# TODO: put this all in one driver function so sources/targets jibe with one another
@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    cmd = [
        'python simulate_from_survival.py',
        '--motif-len 5', # Must be motif length 5 since shmulate only does length 5
        c['simulation_options'],
        '--seed',
        c['seed'],
        '--n-taxa',
        c['simulation_size']['n_taxa'],
        '--n-germlines',
        c['simulation_size']['n_germlines'],
        '--output-true-theta ${TARGETS[0]}',
        '--output-file ${TARGETS[1]}',
        '--output-genes ${TARGETS[2]}',
        '--random-gene-len',
       c['simulation_size']['random_gene_len'],
       '--min-censor-time',
       c['simulation_size']['min_censor_time'],
       '--sparsity-ratio',
       0,
       '--shuffle' if c['simulation_size']['shuffle'] else ''
    ]

    return env.Command(
        [join(outdir, 'true_theta.pkl'), join(outdir, 'seqs.csv'), join(outdir, 'genes.csv')],
        [],
        ' '.join(map(str, cmd)))

# Nest for fitting models
model_single_options = [
    'survival_L5',
    #'survival_none5',
    'basic',
    'shmulate', # shmulate fits both a per-target-model and a single hazard model
]
model_per_target_options = [
    'survival_none4', # No penalty parameters
    'survival_L4',
    'basic_4',
    'shmulate', # shmulate fits both a per-target-model and a single hazard model
]

nest.add(
    'model_options',
    list(set(model_single_options + model_per_target_options)))

# Nest for model fitting
# TODO: put this all in one driver function so sources/targets jibe with one another
@nest.add_target_with_env(localenv)
def fit_context_model(env, outdir, c):
    fit_per_target_model = c['model_options'] in model_per_target_options

    # True model should match the estimated model
    if c['per_target_model'] == "is_per_target":
        if c['model_options'] not in model_per_target_options:
            return
    else:
        if c['model_options'] not in model_single_options:
            return

    per_target_model_str = ""
    if fit_per_target_model:
        per_target_model_str = "--per-target-model"

    cmd = []
    if c["model_options"].startswith("survival_"):
        if c["model_options"] == "survival_L5":
            penalty_params = np.power(10, np.arange(-2.0, -7.0, step=-0.25)).tolist()
        elif c["model_options"] == "survival_none5":
            penalty_params = [0]

        cmd = ['python fit_context_model.py',
               '--seed',
               c['seed'],
               '--motif-lens',
               5,
               '--positions-mutating',
               2,
               '--em-max-iters',
               10,
               '--penalty-params',
               ",".join(map(str, penalty_params)),
               '--num-cpu-threads',
               6,
               '--num-jobs',
               20,
               '--burn-in',
               2,
               '--num-e-samples',
               4,
               '--solver',
               "L",
               '--tuning-sample-ratio',
               0.1,
               per_target_model_str,
               '--scratch-directory',
               SCRATCH_DIR,
               '--theta-file ${SOURCES[0]}',
               '--input-seqs ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    elif c["model_options"] == "shmulate":
        cmd = ['python fit_shmulate_model.py',
               '--theta-file ${SOURCES[0]}',
               '--input-file ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--model-pkl ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    elif c["model_options"].startswith("basic"):
        per_target_model_str = c["model_options"].replace("basic_", "")
        per_target_model_str = "--per-target-model" if per_target_model_str == "4" else ""
        cmd = ['python fit_basic_model.py',
               '--seed',
               c['seed'],
               '--motif-len',
               5,
               per_target_model_str,
               '--theta-file ${SOURCES[0]}',
               '--input-seqs ${SOURCES[1]}',
               '--input-genes ${SOURCES[2]}',
               '--out-file ${TARGETS[0]}',
               '--log-file ${TARGETS[1]}']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['generate'],
        ' '.join(map(str, cmd)))

# Pop to get to the simulation_size level - aggregate different replicates of the model
nest.pop("model_options")
nest.pop("replicate")

@nest.add_target_with_env(localenv)
def operate_on_aggregate_models(env, outdir, c):
    if c['per_target_model'] == "is_single":
        model_types = ','.join(model_single_options)
    else:
        model_types = ','.join(model_per_target_options)

    cmd = ['python compare_models_to_truth.py',
           '--compare-folder',
           outdir,
           '--model-types',
           model_types,
           '--reps',
           localenv["NREPS"],
           '--model-fit-file fitted.pkl',
           '--theta-file true_theta.pkl',
           '--out-file ${TARGETS[0]}']
    return env.Command(
        [join(outdir, 'comparisons.txt')],
        [],
        ' '.join(map(str, cmd)))

# Plot results
