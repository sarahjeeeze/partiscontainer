## Test model fits against one another

import os
import pickle
import csv
import numpy as np

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
from random import randint
from data_paths import CUI_DATA_PATH, SCRATCH_DIR

Import('env')
localenv = env.Clone()

# Set up state
base = {'output_name': localenv['OUTPUT_NAME']}

nest = SConsWrap(Nest(base_dict=base), '_'+localenv['OUTPUT_NAME'], alias_environment=localenv)

LOCUS = 'igk' # only kappa chain is relevant for Cui data
VAL_COLUMN = 'subject' # validate on mice, not randomly

nest.add(
    'test_mouse',
    range(4),
)

# Nest for processing data
# Not imputing so we don't need to pass motif length---this way data will only
# be processed once
@nest.add_target_with_env(localenv)
def process_data(env, outdir, c):
    cmd = ['python preprocess_data.py',
               '--path-to-annotations',
               CUI_DATA_PATH,
               '--metadata-path',
               CUI_DATA_PATH + '/meta.csv',
               '--use-v',
               '--use-immunized',
               '--sample-from-family',
               '--locus',
               LOCUS,
               '--species',
               'mouse',
               '--test-idx',
               c['test_mouse'],
               '--test-column',
               VAL_COLUMN,
               '--scratch-directory',
               SCRATCH_DIR,
               '--output-genes ${TARGETS[0]}',
               '--output-seqs ${TARGETS[1]}',
               '--output-train-seqs ${TARGETS[2]}',
               '--output-test-seqs ${TARGETS[3]}']

    return env.Command(
        [
            join(outdir, 'processed_genes.csv'), join(outdir, 'processed_seqs.csv'),
            join(outdir, 'processed_train_seqs.csv'), join(outdir, 'processed_test_seqs.csv'),
        ],
        [],
        ' '.join(map(str, cmd)))

motif_params_dict = [
    {
        'motif_length': '5',
        'left_motif_flanks': '2',
        'penalty_params': ",".join(map(str, np.power(10, np.arange(-1.5, -7.0, step=-.5)).tolist())),
    },
    {
        'motif_length': '3,5',
        'left_motif_flanks': '1:2',
        'penalty_params': ",".join(map(str, np.power(10, np.arange(-1.5, -7.0, step=-.5)).tolist())),
    },
    {
        'motif_length': '3,5',
        'left_motif_flanks': '0,1,2:2',
        'penalty_params': ",".join(map(str, np.power(10, np.arange(-1.5, -7.0, step=-.5)).tolist())),
    },
]

nest.add(
    'motif_params',
    motif_params_dict,
    label_func=lambda c: 'motif-' + c['motif_length'].replace(',','-') +
        '-flank-' + c['left_motif_flanks'].replace(',', '-').replace(':', '--'))

nest.add(
    'per_target',
    [
         False,
         True,
    ]
)

# fit survival
@nest.add_target_with_env(localenv)
def fit_survival(env, outdir, c):
    cmd = []
    motif_len = c['motif_params']['motif_length']
    left_flanks = c['motif_params']['left_motif_flanks']
    penalty_params = c['motif_params']['penalty_params']

    cmd = ['python fit_samm.py',
           '--input-naive ${SOURCES[0]}',
           '--input-mutated ${SOURCES[2]}',
           '--seed',
           c['test_mouse'],
           '--motif-lens',
           motif_len,
           '--positions-mutating',
           left_flanks,
           '--penalty-params',
           penalty_params,
           '--num-cpu-threads',
           4,
           '--num-jobs',
           10,
           '--burn-in',
           16,
           '--num-e-samples',
           4,
           '--sampling-rate',
           8,
           '--em-max-iters',
           10,
           '--num-val-burnin',
           16,
           '--num-val-samples',
           16,
           '--scratch-directory',
           SCRATCH_DIR,
           '--tuning-sample-ratio',
           0.2,
           '--validation-col germline_family',
           '--omit-hessian',
           '--out-file ${TARGETS[0]}',
           '--log-file ${TARGETS[1]}',
        ]
    if c["per_target"]:
        cmd += ['--per-target-model']
    return env.Command(
        [join(outdir, 'fitted.pkl'), join(outdir, 'log.txt')],
        c['process_data'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_shazam(env, outdir, c):

    cmd = ['python fit_shmulate_model.py',
           '--input-file',
           '${SOURCES[2]}',
           '--input-genes',
           '${SOURCES[0]}',
           '--model-pkl ${TARGETS[0]}',
           '--log-file ${TARGETS[1]}']

    return env.Command(
        [join(outdir, 'fitted_shazam.pkl'), join(outdir, 'log_shazam.txt')],
        c['process_data'],
        ' '.join(map(str, cmd)))

