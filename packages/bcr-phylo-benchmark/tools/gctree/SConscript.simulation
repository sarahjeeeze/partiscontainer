#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''Simulate tree'''
import os
from nestly import Nest
from nestly.scons import SConsWrap
# the following must be exported by parent SConstruct/SConscript
Import('env gctree igphyml dnaml quick idlabel outdir naive mutability substitution lambda_list lambda0_list n frame N T nsim CommandRunner experimental_list naiveIDexp selection_param xarg buffarg')

nest = Nest()
w = SConsWrap(nest, outdir, alias_environment=env)

if gctree:
    w.add_aggregate('gctree_outeragg', list) # <-- aggregating results across parameters
w.add_aggregate('outeragg', list) # <-- aggregating results across parameters

# Initialize our first nest level,
w.add('lambda', lambda_list)
w.add('lambda0', lambda0_list)
if gctree:
    w.add_aggregate('gctree_agg', list) # <-- for aggregating repeated simulations with the same parameters
w.add_aggregate('agg', list) # <-- for aggregating inference result from repeated simulations with the same parameters
w.add_aggregate('simstat_agg', list) # <-- for aggregating simulation stats with the same parameters
w.add_aggregate('summary_stats', list) # <-- summary stats for CFT study (no abundance)

# next nest, just random simulation reruns, same params
w.add('runs', range(1, nsim+1))

@w.add_target()
def gctree_sim(outdir, c):
    '''
    GCtree simulation
    NOTE: xvfb-run is needed because of issue https://github.com/etetoolkit/ete/issues/101
    '''
    frame_arg = ' --frame {} '.format(frame) if frame is not None else ''
    idlabel_arg = ' --idlabel' if idlabel else ''
    T_arg = ' --T {} '.format(' '.join(map(str, T))) if T else ''
    N_arg = ' --N {} '.format(N) if N is not None else ''
    n_arg = ' --n {} '.format(n) if n is not None else ''
    sele_arg = ' --selection True --target_dist {} --target_count {} --verbose {} --carry_cap {} --skip_update {}'.format(*selection_param) if selection_param is not None else ''
    tgt = CommandRunner([os.path.join(outdir, 'gctree.simulation.fasta'),
                         os.path.join(outdir, 'gctree.simulation.stats.tsv'),
                         os.path.join(outdir, 'gctree.simulation.collapsed_tree.p'),
                         os.path.join(outdir, 'gctree.simulation.collapsed_tree.colormap.tsv'),
                         os.path.join(outdir, 'gctree.simulation.log')],
                        [mutability, substitution],
                        xarg + buffarg + 'python bin/gctree.py simulate '+naive+
                        ' ${SOURCES[0]} ${SOURCES[1]}'+
                        ' --outbase '+os.path.join(outdir, 'gctree')+
                        ' --lambda {0[lambda]} --lambda0 {0[lambda0]}'.format(c)+
                        frame_arg+
                        idlabel_arg+
                        T_arg+
                        N_arg+
                        n_arg+
                        sele_arg+
                        ' > ${TARGETS[4]}')
    c['simstat_agg'].append(tgt[1])
    c['summary_stats'].append(tgt[0])
    return tgt

@w.add_target()
def infer(outdir, c):
    '''now do inference on the simulation results'''
    input_file = c['gctree_sim'][0]
    input_file2 = None
    naiveID = 'naive' # this is what the simulation routine names the naive
    converter = None  # No problem with weird fasta formating from the simulated data
    bootstrap = 0
    colorfile = None
    return SConscript('SConscript.inference', exports='env gctree igphyml dnaml quick idlabel frame input_file input_file2 outdir naiveID converter CommandRunner bootstrap xarg buffarg colorfile')

@w.add_target()
def validate(outdir, c):
    '''do validation'''
    outputs = [os.path.join(outdir, 'validation.tsv'), # <-- this one compares different methods
               os.path.join(outdir, 'validation.log')]
    if gctree:
        outputs.append(os.path.join(outdir, 'validation.gctree.tsv')) # <-- special gctree output evaluating parsimony tree ranking
    tgt = CommandRunner(outputs,
                   [c['gctree_sim'][2:4]] + [x[0] for x in c['infer']],
                    xarg + buffarg + 'python bin/validation.py $SOURCES --outbase '+os.path.join(outdir, 'validation')+' > ${TARGETS[1]}')
    if gctree:
        c['gctree_agg'].append(tgt[2])
    c['agg'].append(tgt[0])
    return tgt

w.pop('runs')


if gctree:
    @w.add_target()
    def gctree_aggregate(outdir, c):
        '''aggregate validation results'''
        allmetrics_arg = ' --allmetrics' if igphyml or dnaml else ''
        tgt = env.Command([os.path.join(outdir, 'gctree.validaggreg.tsv'),
                           os.path.join(outdir, 'gctree.validaggreg.log')],
                          c['gctree_agg'],
                          buffarg + 'python bin/validaggreg.py $SOURCES --outbase '+os.path.join(outdir, 'gctree.validaggreg') + allmetrics_arg + ' > ${TARGETS[1]}')
        env.AlwaysBuild(tgt)
        c['gctree_outeragg'].append(tgt[0])
        return tgt

@w.add_target()
def simstat_aggregate(outdir, c):
    '''aggregate simulation stats'''
    tgt = env.Command([os.path.join(outdir, 'gctree.simulation.stats.log')],
                      c['simstat_agg'],
                      buffarg + 'python bin/simstatagg.py $SOURCES --outbase '+os.path.join(outdir, 'gctree.simulation.stats')+
                      ' --experimental example_input/150228_Clone_3-8.fasta > ${TARGETS[0]}')
    env.AlwaysBuild(tgt)
    return tgt

@w.add_target()
def summary_stats(outdir, c):
    '''aggregate simulation stats CFT version'''
    exp_arg = ' --experimental ' + ' '.join(experimental_list) if len(experimental_list) > 0 else ''
    tgt = env.Command([os.path.join(outdir, 'gctree.simulation.summary_stats.log')],
                      c['summary_stats'],
                      buffarg + 'python bin/summary_stats.py $SOURCES --outbase '+os.path.join(outdir, 'gctree.simulation.summary_stats')+
                      exp_arg +
                      ' --naiveIDexp ' + naiveIDexp + ' > ${TARGETS[0]}')
    env.AlwaysBuild(tgt)
    return tgt

@w.add_target()
def inner_aggregate(outdir, c):
    '''aggregate validation results'''
    tgt = env.Command([os.path.join(outdir, 'validaggreg.tsv'),
                       os.path.join(outdir, 'validaggreg.log')],
                      c['agg'],
                      buffarg + 'python bin/validaggreg_compare.py $SOURCES --outbase '+os.path.join(outdir, 'validaggreg')+' > ${TARGETS[1]}')
    env.AlwaysBuild(tgt)
    c['outeragg'].append(tgt[0])
    return tgt

w.pop('lambda')

@w.add_target()
def outer_aggregate(outdir, c):
    '''aggregate different parameter values'''
    tgt = env.Command([os.path.join(outdir, 'aggregation.tsv'),
                       os.path.join(outdir, 'aggregation.log')],
                      c['outeragg'],
                      buffarg + 'python bin/aggregate_compare.py $SOURCES --outbase '+os.path.join(outdir, 'aggregation')+' > ${TARGETS[1]}')
    env.AlwaysBuild(tgt)
    return tgt
